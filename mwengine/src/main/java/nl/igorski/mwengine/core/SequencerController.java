/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.mwengine.core;

public class SequencerController {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SequencerController(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SequencerController obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MWEngineCoreJNI.delete_SequencerController(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SequencerController() {
    this(MWEngineCoreJNI.new_SequencerController__SWIG_0(), true);
  }

  public SequencerController(int amountOfMeasures, int stepsPerBar) {
    this(MWEngineCoreJNI.new_SequencerController__SWIG_1(amountOfMeasures, stepsPerBar), true);
  }

  public void prepare(float aQueuedTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit) {
    MWEngineCoreJNI.SequencerController_prepare(swigCPtr, this, aQueuedTempo, aTimeSigBeatAmount, aTimeSigBeatUnit);
  }

  public float getTempo() {
    return MWEngineCoreJNI.SequencerController_getTempo(swigCPtr, this);
  }

  public void setTempo(float aTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit) {
    MWEngineCoreJNI.SequencerController_setTempo(swigCPtr, this, aTempo, aTimeSigBeatAmount, aTimeSigBeatUnit);
  }

  public void setTempoNow(float aTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit) {
    MWEngineCoreJNI.SequencerController_setTempoNow(swigCPtr, this, aTempo, aTimeSigBeatAmount, aTimeSigBeatUnit);
  }

  public void setVolume(float aVolume) {
    MWEngineCoreJNI.SequencerController_setVolume(swigCPtr, this, aVolume);
  }

  public void setPlaying(boolean aPlaying) {
    MWEngineCoreJNI.SequencerController_setPlaying(swigCPtr, this, aPlaying);
  }

  public void setLoopRange(int aStartPosition, int aEndPosition) {
    MWEngineCoreJNI.SequencerController_setLoopRange__SWIG_0(swigCPtr, this, aStartPosition, aEndPosition);
  }

  public void setLoopRange(int aStartPosition, int aEndPosition, int aStepsPerBar) {
    MWEngineCoreJNI.SequencerController_setLoopRange__SWIG_1(swigCPtr, this, aStartPosition, aEndPosition, aStepsPerBar);
  }

  public int getStepPosition() {
    return MWEngineCoreJNI.SequencerController_getStepPosition(swigCPtr, this);
  }

  public int getBufferPosition() {
    return MWEngineCoreJNI.SequencerController_getBufferPosition(swigCPtr, this);
  }

  public void setBufferPosition(int aPosition) {
    MWEngineCoreJNI.SequencerController_setBufferPosition(swigCPtr, this, aPosition);
  }

  public void updateStepsPerBar(int aStepsPerBar) {
    MWEngineCoreJNI.SequencerController_updateStepsPerBar(swigCPtr, this, aStepsPerBar);
  }

  public void updateMeasures(int aAmount, int aStepsPerBar) {
    MWEngineCoreJNI.SequencerController_updateMeasures(swigCPtr, this, aAmount, aStepsPerBar);
  }

  public int getSamplesPerBeat() {
    return MWEngineCoreJNI.SequencerController_getSamplesPerBeat(swigCPtr, this);
  }

  public int getSamplesPerStep() {
    return MWEngineCoreJNI.SequencerController_getSamplesPerStep(swigCPtr, this);
  }

  public int getSamplesPerBar() {
    return MWEngineCoreJNI.SequencerController_getSamplesPerBar(swigCPtr, this);
  }

  public int getTimeSigBeatAmount() {
    return MWEngineCoreJNI.SequencerController_getTimeSigBeatAmount(swigCPtr, this);
  }

  public int getTimeSigBeatUnit() {
    return MWEngineCoreJNI.SequencerController_getTimeSigBeatUnit(swigCPtr, this);
  }

  public void rewind() {
    MWEngineCoreJNI.SequencerController_rewind(swigCPtr, this);
  }

  public void setNotificationMarker(int aPosition) {
    MWEngineCoreJNI.SequencerController_setNotificationMarker(swigCPtr, this, aPosition);
  }

  public BulkCacher getBulkCacher() {
    long cPtr = MWEngineCoreJNI.SequencerController_getBulkCacher(swigCPtr, this);
    return (cPtr == 0) ? null : new BulkCacher(cPtr, false);
  }

  public void cacheAudioEventsForMeasure(int aMeasure) {
    MWEngineCoreJNI.SequencerController_cacheAudioEventsForMeasure(swigCPtr, this, aMeasure);
  }

  public void setBounceState(boolean aIsBouncing, int aMaxBuffers, String aOutputFile, int rangeStart, int rangeEnd) {
    MWEngineCoreJNI.SequencerController_setBounceState(swigCPtr, this, aIsBouncing, aMaxBuffers, aOutputFile, rangeStart, rangeEnd);
  }

  public void setRecordingState(boolean aRecording, int aMaxBuffers, String aOutputFile) {
    MWEngineCoreJNI.SequencerController_setRecordingState(swigCPtr, this, aRecording, aMaxBuffers, aOutputFile);
  }

  public void setRecordingFromDeviceState(boolean aRecording, int aMaxBuffers, String aOutputFile) {
    MWEngineCoreJNI.SequencerController_setRecordingFromDeviceState(swigCPtr, this, aRecording, aMaxBuffers, aOutputFile);
  }

  public void saveRecordedSnippet(int snippetBufferIndex) {
    MWEngineCoreJNI.SequencerController_saveRecordedSnippet(swigCPtr, this, snippetBufferIndex);
  }

}
