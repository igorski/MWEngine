/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2022 Igor Zinken - http://www.igorski.nl
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef __MWENGINE__SEQUENCERCONTROLLER_H_INCLUDED__
#define __MWENGINE__SEQUENCERCONTROLLER_H_INCLUDED__

#include "sequencer.h"
#include <utilities/bulkcacher.h>

/**
 * SequencerController acts as the interface to control the Sequencers
 * speed, position, range, etc. it is basically the mediator between
 * the user interface and the Sequencer
 */
namespace MWEngine {
class SequencerController
{
    public:
        SequencerController();
        SequencerController( int amountOfMeasures, int stepsPerBar );
        ~SequencerController();
        
        void prepare    ( float aQueuedTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit );
        float getTempo  ();
        void setTempo   ( float aTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit );
        void setTempoNow( float aTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit );
        void setVolume  ( float aVolume );
        void setPlaying ( bool aPlaying );

        /**
         * make the sequencer loop between two given points
         *
         * @param aStartPosition {int} buffer offset of the loops startpoint (starts at 0 !)
         * @param aEndPosition   {int} buffer offset of the loops endpoint
         * @param aStepsPerBar   {int} the amount of individual segments the sequencer subdivides a single bar into
         *                             this is used for periodic notifications when the sequencer switches step
         */
        void setLoopRange( int aStartPosition, int aEndPosition );
        void setLoopRange( int aStartPosition, int aEndPosition, int aStepsPerBar );

        int getStepPosition       ();
        int  getBufferPosition    ();
        void setBufferPosition    ( int aPosition );
        void updateStepsPerBar    ( int aStepsPerBar );
        void updateMeasures       ( int aAmount, int aStepsPerBar );
        int getSamplesPerBeat     ();
        int getSamplesPerStep     ();
        int getSamplesPerBar      ();
        int getTimeSigBeatAmount  ();
        int getTimeSigBeatUnit    ();
        void rewind               ();
        void setNotificationMarker( int aPosition );

        BulkCacher* getBulkCacher();
        void cacheAudioEventsForMeasure( int aMeasure );

        /**
         * when bouncing, the writing of buffers into the hardware is omitted
         * for an increase in bouncing speed (otherwise its real time)
         */
        void setBounceState( bool aIsBouncing, int aMaxBuffers, char* aOutputFile, int rangeStart, int rangeEnd );

        /**
         * Record the output of the sequencer onto storage
         *
         * aRecording        {bool} toggles the recording state
         * aMaxBuffers        {int} the total recorded buffer size to store in memory
         *                          before writing the recorded snippet as .WAV file into
         *                          the given output file's directory.
         * aOutputDirectory {char*} name of the output WAV file to generate when recording completes
         *                          (when recording state is disabled), this will concatenate all snippets.
         */
        void setRecordingState( bool aRecording,  int aMaxBuffers, char* aOutputFile );

        /**
         * record audio from the Androids input channel, this stores only the incoming audio
         * not the remaining audio processed / generated by the engine
         *
         * aRecording        {bool} toggles the recording state
         * aMaxBuffers        {int} the total recorded buffer size to store in memory
         *                          before writing the recorded contents as .WAV file into
         *                          the given output directory.
         * aOutputDirectory {char*} name of the folder to write each snippet into
         * skipProcessing {bool} when true, the device input is recorded onto disk dry, when
         *                false, the ProcessingChain of the input channel is applied prior to writing
         */
        void setRecordingFromDeviceState( bool aRecording,  int aMaxBuffers, char* aOutputFile, bool skipProcessing );

        /**
         * Save the contents of the snippet at given buffer index
         * onto storage. This should be invoked from a thread separate to the
         * audio rendering thread to prevent buffer under runs from happening
         * while writing the buffer during the rendering of audio output
         */
        void saveRecordedSnippet( int snippetBufferIndex );
};
} // E.O namespace MWEngine

#endif
