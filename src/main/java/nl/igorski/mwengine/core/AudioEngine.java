/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.mwengine.core;

public class AudioEngine {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected AudioEngine(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AudioEngine obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MWEngineCoreJNI.delete_AudioEngine(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static void setup(long bufferSize, long sampleRate, long amountOfChannels) {
    MWEngineCoreJNI.AudioEngine_setup(bufferSize, sampleRate, amountOfChannels);
  }

  public static void start(Drivers.types audioDriver) {
    MWEngineCoreJNI.AudioEngine_start(audioDriver.swigValue());
  }

  public static void stop() {
    MWEngineCoreJNI.AudioEngine_stop();
  }

  public static void reset() {
    MWEngineCoreJNI.AudioEngine_reset();
  }

  public static AudioChannel getInputChannel() {
    long cPtr = MWEngineCoreJNI.AudioEngine_getInputChannel();
    return (cPtr == 0) ? null : new AudioChannel(cPtr, false);
  }

  public static void setSamples_per_beat(int value) {
    MWEngineCoreJNI.AudioEngine_samples_per_beat_set(value);
  }

  public static int getSamples_per_beat() {
    return MWEngineCoreJNI.AudioEngine_samples_per_beat_get();
  }

  public static void setSamples_per_bar(int value) {
    MWEngineCoreJNI.AudioEngine_samples_per_bar_set(value);
  }

  public static int getSamples_per_bar() {
    return MWEngineCoreJNI.AudioEngine_samples_per_bar_get();
  }

  public static void setSamples_per_step(int value) {
    MWEngineCoreJNI.AudioEngine_samples_per_step_set(value);
  }

  public static int getSamples_per_step() {
    return MWEngineCoreJNI.AudioEngine_samples_per_step_get();
  }

  public static void setAmount_of_bars(int value) {
    MWEngineCoreJNI.AudioEngine_amount_of_bars_set(value);
  }

  public static int getAmount_of_bars() {
    return MWEngineCoreJNI.AudioEngine_amount_of_bars_get();
  }

  public static void setSteps_per_bar(int value) {
    MWEngineCoreJNI.AudioEngine_steps_per_bar_set(value);
  }

  public static int getSteps_per_bar() {
    return MWEngineCoreJNI.AudioEngine_steps_per_bar_get();
  }

  public static void setRecordDeviceInput(boolean value) {
    MWEngineCoreJNI.AudioEngine_recordDeviceInput_set(value);
  }

  public static boolean getRecordDeviceInput() {
    return MWEngineCoreJNI.AudioEngine_recordDeviceInput_get();
  }

  public static void setMasterBus(ProcessingChain value) {
    MWEngineCoreJNI.AudioEngine_masterBus_set(ProcessingChain.getCPtr(value), value);
  }

  public static ProcessingChain getMasterBus() {
    long cPtr = MWEngineCoreJNI.AudioEngine_masterBus_get();
    return (cPtr == 0) ? null : new ProcessingChain(cPtr, false);
  }

  public static void addChannelGroup(ChannelGroup group) {
    MWEngineCoreJNI.AudioEngine_addChannelGroup(ChannelGroup.getCPtr(group), group);
  }

  public static void removeChannelGroup(ChannelGroup group) {
    MWEngineCoreJNI.AudioEngine_removeChannelGroup(ChannelGroup.getCPtr(group), group);
  }

  public AudioEngine() {
    this(MWEngineCoreJNI.new_AudioEngine(), true);
  }

}
