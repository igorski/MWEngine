/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "jni/javabridge_api.h"
#include "jni/javautilities.h"
#include "definitions/notifications.h"
#include "definitions/waveforms.h"
#include "audiochannel.h"
#include "processingchain.h"
#include "processors/bitcrusher.h"
#include "processors/baseprocessor.h"
#include "processors/decimator.h"
#include "processors/delay.h"
#include "processors/filter.h"
#include "processors/flanger.h"
#include "processors/limiter.h"
#include "processors/fm.h"
#include "processors/formantfilter.h"
#include "processors/glitcher.h"
#include "processors/lowpassfilter.h"
#include "processors/lpfhpfilter.h"
#include "processors/phaser.h"
#include "processors/pitchshifter.h"
#include "processors/reverb.h"
#include "processors/tremolo.h"
#include "processors/waveshaper.h"
#include "utilities/bufferutility.h"
#include "utilities/bulkcacher.h"
#include "utilities/levelutility.h"
#include "drumpattern.h"
#include "modules/adsr.h"
#include "modules/arpeggiator.h"
#include "modules/lfo.h"
#include "modules/routeableoscillator.h"
#include "utilities/samplemanager.h"
#include "utilities/sampleutility.h"
#include "instruments/baseinstrument.h"
#include "instruments/druminstrument.h"
#include "instruments/sampledinstrument.h"
#include "instruments/synthinstrument.h"
#include "instruments/oscillatorproperties.h"
#include "events/sampleevent.h"
#include "events/drumevent.h"
#include "events/basecacheableaudioevent.h"
#include "events/basesynthevent.h"
#include "events/synthevent.h"
#include "sequencercontroller.h"


static int *new_int_array(int nelements) { 
  return new int[nelements](); 
}

static void delete_int_array(int *ary) { 
  delete [] ary; 
}

static int int_array_getitem(int *ary, int index) {
    return ary[index];
}
static void int_array_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1int_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)new_int_array(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1int_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_int_array(arg1);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_int_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)int_array_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_int_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  int_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  init();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_setup(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  setup(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_start(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  start();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_stop(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  stop();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_reset(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  reset();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_getMasterBusProcessors(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ProcessingChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ProcessingChain *)getMasterBusProcessors();
  *(ProcessingChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_JavaUtilities_1createSampleFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  jstring arg1 ;
  jstring arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  arg2 = jarg2; 
  result = (bool)JavaUtilities::createSampleFromFile(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_JavaUtilities_1createSampleFromAsset(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  jstring arg1 ;
  jobject arg2 ;
  jstring arg3 ;
  jstring arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  result = (bool)JavaUtilities::createSampleFromAsset(arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_JavaUtilities_1createSampleFromBuffer(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jstring arg1 ;
  jint arg2 ;
  jint arg3 ;
  jdoubleArray arg4 ;
  jdoubleArray arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  JavaUtilities::createSampleFromBuffer(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_JavaUtilities_1cacheTable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3) {
  jint arg1 ;
  jint arg2 ;
  jstring arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  JavaUtilities::cacheTable(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_JavaUtilities_1cacheTable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jdoubleArray jarg4) {
  jint arg1 ;
  jint arg2 ;
  jstring arg3 ;
  jdoubleArray arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  JavaUtilities::cacheTable(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_JavaUtilities_1createTableFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  jstring arg1 ;
  jstring arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  arg2 = jarg2; 
  result = (bool)JavaUtilities::createTableFromFile(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1JavaUtilities(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  JavaUtilities *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (JavaUtilities *)new JavaUtilities();
  *(JavaUtilities **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1JavaUtilities(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JavaUtilities *arg1 = (JavaUtilities *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JavaUtilities **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Notifications(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Notifications *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Notifications *)new Notifications();
  *(Notifications **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Notifications(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Notifications *arg1 = (Notifications *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Notifications **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1WaveForms(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WaveForms *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WaveForms *)new WaveForms();
  *(WaveForms **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1WaveForms(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WaveForms *arg1 = (WaveForms *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaveForms **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1AudioChannel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  AudioChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (AudioChannel *)new AudioChannel(arg1);
  *(AudioChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1AudioChannel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  int arg2 ;
  AudioChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (int)jarg2; 
  result = (AudioChannel *)new AudioChannel(arg1,arg2);
  *(AudioChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1AudioChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AudioChannel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1audioEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::vector< BaseAudioEvent * > *arg2 = (std::vector< BaseAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(std::vector< BaseAudioEvent * > **)&jarg2; 
  if (arg1) (arg1)->audioEvents = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1audioEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *)& ((arg1)->audioEvents);
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1liveEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::vector< BaseAudioEvent * > *arg2 = (std::vector< BaseAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(std::vector< BaseAudioEvent * > **)&jarg2; 
  if (arg1) (arg1)->liveEvents = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1liveEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *)& ((arg1)->liveEvents);
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1processingChain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  ProcessingChain *arg2 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(ProcessingChain **)&jarg2; 
  if (arg1) (arg1)->processingChain = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1processingChain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  ProcessingChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (ProcessingChain *) ((arg1)->processingChain);
  *(ProcessingChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (float)(arg1)->getVolume();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1getVolumeLogarithmic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (float)(arg1)->getVolumeLogarithmic();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setVolume(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1hasLiveEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasLiveEvents = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1hasLiveEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (bool) ((arg1)->hasLiveEvents);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1isMono_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMono = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1isMono_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (bool) ((arg1)->isMono);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1muted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->muted = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1muted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (bool) ((arg1)->muted);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1hasCache_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasCache = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1hasCache_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (bool) ((arg1)->hasCache);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1isCaching_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isCaching = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1isCaching_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (bool) ((arg1)->isCaching);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1instanceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->instanceId = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1instanceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (int) ((arg1)->instanceId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1maxBufferPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxBufferPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1maxBufferPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (int) ((arg1)->maxBufferPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1addEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  BaseAudioEvent *arg2 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(BaseAudioEvent **)&jarg2; 
  (arg1)->addEvent(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1addLiveEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  BaseAudioEvent *arg2 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(BaseAudioEvent **)&jarg2; 
  (arg1)->addLiveEvent(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1getPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (float)(arg1)->getPan();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1setPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setPan(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1createOutputBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  (arg1)->createOutputBuffer();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1getOutputBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  AudioBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (AudioBuffer *)(arg1)->getOutputBuffer();
  *(AudioBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1mixBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->mixBuffer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1readCachedBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->readCachedBuffer(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1canCache_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  result = (bool)(arg1)->canCache();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1canCache_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jint jarg4, jint jarg5) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->canCache(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1clearCachedBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  (arg1)->clearCachedBuffer();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AudioChannel_1writeCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->writeCache(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1ADSR_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ADSR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ADSR *)new ADSR();
  *(ADSR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1ADSR_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ADSR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ADSR *)new ADSR(arg1,arg2,arg3,arg4);
  *(ADSR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1ADSR(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ADSR *arg1 = (ADSR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ADSR **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ADSR *arg1 = (ADSR *) 0 ;
  ADSR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  result = (ADSR *)(arg1)->clone();
  *(ADSR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1cloneEnvelopes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ADSR *arg1 = (ADSR *) 0 ;
  ADSR *arg2 = (ADSR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ADSR **)&jarg1; 
  arg2 = *(ADSR **)&jarg2; 
  (arg1)->cloneEnvelopes(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1getAttackTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ADSR *arg1 = (ADSR *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  result = (float)(arg1)->getAttackTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1getDecayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ADSR *arg1 = (ADSR *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  result = (float)(arg1)->getDecayTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1getSustainLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ADSR *arg1 = (ADSR *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  result = (float)(arg1)->getSustainLevel();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1getReleaseTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ADSR *arg1 = (ADSR *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  result = (float)(arg1)->getReleaseTime();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1setAttackTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ADSR *arg1 = (ADSR *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAttackTime(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1setDecayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ADSR *arg1 = (ADSR *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setDecayTime(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1setSustainLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ADSR *arg1 = (ADSR *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setSustainLevel(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1setReleaseTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ADSR *arg1 = (ADSR *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setReleaseTime(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1getReleaseStartOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ADSR *arg1 = (ADSR *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  result = (int)(arg1)->getReleaseStartOffset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1getReleaseDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ADSR *arg1 = (ADSR *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  result = (int)(arg1)->getReleaseDuration();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  ADSR *arg1 = (ADSR *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  BaseSynthEvent *arg3 = (BaseSynthEvent *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ADSR **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = *(BaseSynthEvent **)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->apply(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ADSR_1setDurations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  ADSR *arg1 = (ADSR *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ADSR **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setDurations(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Arpeggiator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Arpeggiator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Arpeggiator *)new Arpeggiator();
  *(Arpeggiator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Arpeggiator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Arpeggiator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1MAX_1STEPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Arpeggiator::MAX_STEPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1getStepSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  result = (int)(arg1)->getStepSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1setStepSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStepSize(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1getAmountOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  result = (int)(arg1)->getAmountOfSteps();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1setAmountOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAmountOfSteps(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1getShiftForStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getShiftForStep(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1setShiftForStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setShiftForStep(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1setStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStep(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1getStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  result = (int)(arg1)->getStep();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1peek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  result = (bool)(arg1)->peek();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1getPitchForStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int arg2 ;
  float arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->getPitchForStep(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1getBufferPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  result = (int)(arg1)->getBufferPosition();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1setBufferPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBufferPosition(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1cloneProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  Arpeggiator *arg2 = (Arpeggiator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Arpeggiator **)&jarg1; 
  arg2 = *(Arpeggiator **)&jarg2; 
  (arg1)->cloneProperties(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Arpeggiator_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Arpeggiator *arg1 = (Arpeggiator *) 0 ;
  Arpeggiator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Arpeggiator **)&jarg1; 
  result = (Arpeggiator *)(arg1)->clone();
  *(Arpeggiator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1LFO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LFO *)new LFO();
  *(LFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1LFO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LFO *arg1 = (LFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LFO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LFO_1MAX_1LFO_1RATE(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)LFO::MAX_LFO_RATE();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LFO_1MIN_1LFO_1RATE(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)LFO::MIN_LFO_RATE();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LFO_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  LFO *arg1 = (LFO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LFO_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  LFO *arg1 = (LFO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRate(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LFO_1getWave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LFO *arg1 = (LFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  result = (int)(arg1)->getWave();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LFO_1setWave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  LFO *arg1 = (LFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setWave(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LFO_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  LFO *arg1 = (LFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  (arg1)->generate();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LFO_1getTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LFO *arg1 = (LFO *) 0 ;
  WaveTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LFO **)&jarg1; 
  result = (WaveTable *)(arg1)->getTable();
  *(WaveTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1RouteableOscillator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RouteableOscillator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RouteableOscillator *)new RouteableOscillator();
  *(RouteableOscillator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1RouteableOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RouteableOscillator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1destination_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->destination = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1destination_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (int) ((arg1)->destination);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (float) ((arg1)->speed);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1wave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->wave = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1wave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (int) ((arg1)->wave);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1linkOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  (arg1)->linkOscillator();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1unlinkOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  (arg1)->unlinkOscillator();
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1isLinked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (bool)(arg1)->isLinked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_RouteableOscillator_1getLinkedOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RouteableOscillator *arg1 = (RouteableOscillator *) 0 ;
  LFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RouteableOscillator **)&jarg1; 
  result = (LFO *)(arg1)->getLinkedOscillator();
  *(LFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1ProcessingChain(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ProcessingChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ProcessingChain *)new ProcessingChain();
  *(ProcessingChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1ProcessingChain(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProcessingChain **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ProcessingChain_1getActiveProcessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  SwigValueWrapper< std::vector< BaseProcessor * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  result = (arg1)->getActiveProcessors();
  *(std::vector< BaseProcessor * > **)&jresult = new std::vector< BaseProcessor * >((const std::vector< BaseProcessor * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ProcessingChain_1addProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  BaseProcessor *arg2 = (BaseProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(BaseProcessor **)&jarg2; 
  (arg1)->addProcessor(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ProcessingChain_1removeProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  BaseProcessor *arg2 = (BaseProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProcessingChain **)&jarg1; 
  arg2 = *(BaseProcessor **)&jarg2; 
  (arg1)->removeProcessor(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_ProcessingChain_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ProcessingChain *arg1 = (ProcessingChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProcessingChain **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BaseProcessor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseProcessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseProcessor *)new BaseProcessor();
  *(BaseProcessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1BaseProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseProcessor *arg1 = (BaseProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseProcessor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseProcessor_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  BaseProcessor *arg1 = (BaseProcessor *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseProcessor **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseProcessor_1isCacheable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseProcessor *arg1 = (BaseProcessor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseProcessor **)&jarg1; 
  result = (bool)(arg1)->isCacheable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BitCrusher(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  BitCrusher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (BitCrusher *)new BitCrusher(arg1,arg2,arg3);
  *(BitCrusher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1getAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  result = (float)(arg1)->getAmount();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1setAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAmount(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1getInputMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  result = (float)(arg1)->getInputMix();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1setInputMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setInputMix(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1getOutputMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  result = (float)(arg1)->getOutputMix();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1setOutputMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setOutputMix(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1isCacheable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BitCrusher **)&jarg1; 
  result = (bool)(arg1)->isCacheable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1BitCrusher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BitCrusher *arg1 = (BitCrusher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BitCrusher **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Decimator(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  float arg2 ;
  Decimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  result = (Decimator *)new Decimator(arg1,arg2);
  *(Decimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Decimator_1getBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Decimator *arg1 = (Decimator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  result = (int)(arg1)->getBits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Decimator_1setBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Decimator *arg1 = (Decimator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBits(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Decimator_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Decimator *arg1 = (Decimator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Decimator_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Decimator *arg1 = (Decimator *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRate(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Decimator_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Decimator *arg1 = (Decimator *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Decimator **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Decimator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Decimator *arg1 = (Decimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Decimator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Delay(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloat jarg3, jfloat jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  Delay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (Delay *)new Delay(arg1,arg2,arg3,arg4,arg5);
  *(Delay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Delay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Delay *arg1 = (Delay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Delay **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1getDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (int)(arg1)->getDelayTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1setDelayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Delay *arg1 = (Delay *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDelayTime(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1getMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (float)(arg1)->getMix();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1setMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Delay *arg1 = (Delay *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMix(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1getFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Delay *arg1 = (Delay *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  result = (float)(arg1)->getFeedback();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1setFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Delay *arg1 = (Delay *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFeedback(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Delay *arg1 = (Delay *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Delay *arg1 = (Delay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Delay **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Filter(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  Filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (Filter *)new Filter(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Filter *arg1 = (Filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Filter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1setCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Filter *arg1 = (Filter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setCutoff(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1getCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (float)(arg1)->getCutoff();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1setResonance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Filter *arg1 = (Filter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setResonance(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1getResonance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (float)(arg1)->getResonance();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1hasLFO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (bool)(arg1)->hasLFO();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1hasLFO_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Filter *arg1 = (Filter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->hasLFO(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1getLFO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (float)(arg1)->getLFO();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1setLFO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Filter *arg1 = (Filter *) 0 ;
  LFO *arg2 = (LFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = *(LFO **)&jarg2; 
  (arg1)->setLFO(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1setLFORate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Filter *arg1 = (Filter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setLFORate(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Filter *arg1 = (Filter *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1isCacheable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Filter *arg1 = (Filter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Filter **)&jarg1; 
  result = (bool)(arg1)->isCacheable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Flanger(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Flanger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Flanger *)new Flanger(arg1,arg2,arg3,arg4,arg5);
  *(Flanger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Flanger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Flanger *arg1 = (Flanger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Flanger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Flanger *arg1 = (Flanger *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Flanger *arg1 = (Flanger *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRate(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Flanger *arg1 = (Flanger *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  result = (float)(arg1)->getWidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Flanger *arg1 = (Flanger *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1getFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Flanger *arg1 = (Flanger *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  result = (float)(arg1)->getFeedback();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1setFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Flanger *arg1 = (Flanger *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFeedback(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1getDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Flanger *arg1 = (Flanger *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  result = (float)(arg1)->getDelay();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1setDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Flanger *arg1 = (Flanger *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setDelay(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1getMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Flanger *arg1 = (Flanger *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  result = (float)(arg1)->getMix();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1setMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Flanger *arg1 = (Flanger *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMix(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Flanger *arg1 = (Flanger *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Flanger **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Limiter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Limiter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Limiter *)new Limiter();
  *(Limiter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Limiter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Limiter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Limiter *)new Limiter(arg1,arg2,arg3);
  *(Limiter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Limiter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Limiter *arg1 = (Limiter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Limiter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1getAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Limiter *arg1 = (Limiter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  result = (float)(arg1)->getAttack();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1setAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Limiter *arg1 = (Limiter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAttack(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1getRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Limiter *arg1 = (Limiter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  result = (float)(arg1)->getRelease();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1setRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Limiter *arg1 = (Limiter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRelease(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1getThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Limiter *arg1 = (Limiter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  result = (float)(arg1)->getThreshold();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1setThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Limiter *arg1 = (Limiter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setThreshold(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Limiter *arg1 = (Limiter *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1getLinearGR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Limiter *arg1 = (Limiter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  result = (float)(arg1)->getLinearGR();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1isCacheable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Limiter *arg1 = (Limiter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Limiter **)&jarg1; 
  result = (bool)(arg1)->isCacheable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1LowPassFilter(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  LowPassFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (LowPassFilter *)new LowPassFilter(arg1);
  *(LowPassFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1LowPassFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LowPassFilter *arg1 = (LowPassFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LowPassFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LowPassFilter_1getCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  LowPassFilter *arg1 = (LowPassFilter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LowPassFilter **)&jarg1; 
  result = (float)(arg1)->getCutoff();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LowPassFilter_1setCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  LowPassFilter *arg1 = (LowPassFilter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LowPassFilter **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setCutoff(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LowPassFilter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  LowPassFilter *arg1 = (LowPassFilter *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LowPassFilter **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LowPassFilter_1processSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  LowPassFilter *arg1 = (LowPassFilter *) 0 ;
  SAMPLE_TYPE arg2 ;
  SAMPLE_TYPE *argp2 ;
  SAMPLE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LowPassFilter **)&jarg1; 
  argp2 = *(SAMPLE_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SAMPLE_TYPE");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->processSingle(arg2);
  *(SAMPLE_TYPE **)&jresult = new SAMPLE_TYPE((const SAMPLE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1LPFHPFilter(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jint jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  int arg3 ;
  LPFHPFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  result = (LPFHPFilter *)new LPFHPFilter(arg1,arg2,arg3);
  *(LPFHPFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1LPFHPFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LPFHPFilter *arg1 = (LPFHPFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LPFHPFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LPFHPFilter_1setLPF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3) {
  LPFHPFilter *arg1 = (LPFHPFilter *) 0 ;
  float arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LPFHPFilter **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLPF(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LPFHPFilter_1setHPF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3) {
  LPFHPFilter *arg1 = (LPFHPFilter *) 0 ;
  float arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LPFHPFilter **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setHPF(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LPFHPFilter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  LPFHPFilter *arg1 = (LPFHPFilter *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LPFHPFilter **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1FrequencyModulator(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  float arg2 ;
  FrequencyModulator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  result = (FrequencyModulator *)new FrequencyModulator(arg1,arg2);
  *(FrequencyModulator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FrequencyModulator_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FrequencyModulator_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FrequencyModulator_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRate(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FrequencyModulator_1getWave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  result = (int)(arg1)->getWave();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FrequencyModulator_1setWave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FrequencyModulator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setWave(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1FrequencyModulator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FrequencyModulator *arg1 = (FrequencyModulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FrequencyModulator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1FormantFilter(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  FormantFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (FormantFilter *)new FormantFilter(arg1);
  *(FormantFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1FormantFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FormantFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1setVowel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FormantFilter **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVowel(arg2);
}


SWIGEXPORT jdouble JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1getVowel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FormantFilter **)&jarg1; 
  result = (double)(arg1)->getVowel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FormantFilter **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1isCacheable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FormantFilter *arg1 = (FormantFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FormantFilter **)&jarg1; 
  result = (bool)(arg1)->isCacheable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1VOWEL_1A_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_A;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1VOWEL_1E_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_E;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1VOWEL_1I_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_I;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1VOWEL_1O_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_O;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1VOWEL_1U_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)FormantFilter::VOWEL_U;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Glitcher(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Glitcher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Glitcher *)new Glitcher(arg1,arg2);
  *(Glitcher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Glitcher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Glitcher *arg1 = (Glitcher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Glitcher **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Glitcher_1setRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Glitcher *arg1 = (Glitcher *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Glitcher **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRecording(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Glitcher_1setPlayback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Glitcher *arg1 = (Glitcher *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Glitcher **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPlayback(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Glitcher_1setPlaybackRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Glitcher *arg1 = (Glitcher *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Glitcher **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setPlaybackRange(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Glitcher_1getSampleLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Glitcher *arg1 = (Glitcher *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Glitcher **)&jarg1; 
  result = (int)(arg1)->getSampleLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Glitcher_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Glitcher *arg1 = (Glitcher *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Glitcher **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1AllPassDelay(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AllPassDelay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AllPassDelay *)new AllPassDelay();
  *(AllPassDelay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AllPassDelay_1delay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  AllPassDelay *arg1 = (AllPassDelay *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AllPassDelay **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->delay(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_AllPassDelay_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  AllPassDelay *arg1 = (AllPassDelay *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AllPassDelay **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->update(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1AllPassDelay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AllPassDelay *arg1 = (AllPassDelay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AllPassDelay **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Phaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Phaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Phaser *)new Phaser(arg1,arg2,arg3,arg4,arg5);
  *(Phaser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Phaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  Phaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (Phaser *)new Phaser(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Phaser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Phaser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Phaser *arg1 = (Phaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Phaser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1setDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Phaser *arg1 = (Phaser *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setDepth(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Phaser *arg1 = (Phaser *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  result = (float)(arg1)->getDepth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1setFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Phaser *arg1 = (Phaser *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFeedback(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1getFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Phaser *arg1 = (Phaser *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  result = (float)(arg1)->getFeedback();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Phaser *arg1 = (Phaser *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRate(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Phaser *arg1 = (Phaser *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  result = (float)(arg1)->getRate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Phaser *arg1 = (Phaser *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setRange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Phaser *arg1 = (Phaser *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Phaser **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(3.14159265358979323846);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_MAX_1FRAME_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8192);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1PitchShifter(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  long arg2 ;
  PitchShifter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (long)jarg2; 
  result = (PitchShifter *)new PitchShifter(arg1,arg2);
  *(PitchShifter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1PitchShifter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PitchShifter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_PitchShifter_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PitchShifter **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_PitchShifter_1isCacheable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PitchShifter **)&jarg1; 
  result = (bool)(arg1)->isCacheable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_PitchShifter_1pitchShift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PitchShifter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->pitchShift = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_PitchShifter_1pitchShift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  PitchShifter *arg1 = (PitchShifter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PitchShifter **)&jarg1; 
  result = (float) ((arg1)->pitchShift);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Reverb(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Reverb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Reverb *)new Reverb(arg1,arg2,arg3,arg4);
  *(Reverb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Reverb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Reverb *arg1 = (Reverb *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Reverb **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Reverb *arg1 = (Reverb *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  result = (float)(arg1)->getSize();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Reverb *arg1 = (Reverb *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1getHFDamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Reverb *arg1 = (Reverb *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  result = (float)(arg1)->getHFDamp();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1setHFDamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Reverb *arg1 = (Reverb *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setHFDamp(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1getMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Reverb *arg1 = (Reverb *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  result = (float)(arg1)->getMix();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1setMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Reverb *arg1 = (Reverb *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMix(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1getOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Reverb *arg1 = (Reverb *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  result = (float)(arg1)->getOutput();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1setOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Reverb *arg1 = (Reverb *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setOutput(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Reverb *arg1 = (Reverb *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Reverb **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1ENVELOPE_1PRECISION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Tremolo::ENVELOPE_PRECISION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1Tremolo(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Tremolo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (Tremolo *)new Tremolo(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Tremolo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1Tremolo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tremolo *arg1 = (Tremolo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tremolo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1getLeftAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tremolo *arg1 = (Tremolo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  result = (int)(arg1)->getLeftAttack();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1setLeftAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Tremolo *arg1 = (Tremolo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeftAttack(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1getRightAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tremolo *arg1 = (Tremolo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  result = (int)(arg1)->getRightAttack();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1setRightAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Tremolo *arg1 = (Tremolo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setRightAttack(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1getLeftDecay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tremolo *arg1 = (Tremolo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  result = (int)(arg1)->getLeftDecay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1setLeftDecay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Tremolo *arg1 = (Tremolo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeftDecay(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1getRightDecay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tremolo *arg1 = (Tremolo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  result = (int)(arg1)->getRightDecay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1setRightDecay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Tremolo *arg1 = (Tremolo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setRightDecay(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1getTableForChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Tremolo *arg1 = (Tremolo *) 0 ;
  int arg2 ;
  SAMPLE_TYPE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SAMPLE_TYPE *)(arg1)->getTableForChannel(arg2);
  *(SAMPLE_TYPE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1isStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Tremolo *arg1 = (Tremolo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  result = (bool)(arg1)->isStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Tremolo *arg1 = (Tremolo *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tremolo **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1WaveShaper(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  WaveShaper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (WaveShaper *)new WaveShaper(arg1,arg2);
  *(WaveShaper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_WaveShaper_1getAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  result = (float)(arg1)->getAmount();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_WaveShaper_1setAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAmount(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_WaveShaper_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  result = (float)(arg1)->getLevel();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_WaveShaper_1setLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setLevel(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_WaveShaper_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WaveShaper **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->process(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1WaveShaper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WaveShaper *arg1 = (WaveShaper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaveShaper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1getBPMbyLength(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)BufferUtility::getBPMbyLength(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1getBPMbySamples(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)BufferUtility::getBPMbySamples(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1bufferToMilliseconds(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)BufferUtility::bufferToMilliseconds(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1millisecondsToBuffer(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)BufferUtility::millisecondsToBuffer(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1bufferToSeconds(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jfloat jresult = 0 ;
  int arg1 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)BufferUtility::bufferToSeconds(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1secondsToBuffer(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2) {
  jint jresult = 0 ;
  float arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)BufferUtility::secondsToBuffer(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1getBitRate(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)BufferUtility::getBitRate(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1calculateSamplesPerBeatDivision(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jint jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  double arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)BufferUtility::calculateSamplesPerBeatDivision(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1getSamplesPerBeat(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (int)BufferUtility::getSamplesPerBeat(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1getSamplesPerBar(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  int arg1 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)BufferUtility::getSamplesPerBar(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1calculateBufferLength_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SAMPLE_TYPE arg1 ;
  SAMPLE_TYPE *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(SAMPLE_TYPE **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SAMPLE_TYPE");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)BufferUtility::calculateBufferLength(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1calculateBufferLength_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)BufferUtility::calculateBufferLength(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1createSampleBuffers(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::vector< SAMPLE_TYPE * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::vector< SAMPLE_TYPE * > *)BufferUtility::createSampleBuffers(arg1,arg2);
  *(std::vector< SAMPLE_TYPE * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1generateSilentBuffer(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SAMPLE_TYPE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SAMPLE_TYPE *)BufferUtility::generateSilentBuffer(arg1);
  *(SAMPLE_TYPE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BufferUtility_1bufferToFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  char *arg1 = (char *) 0 ;
  SAMPLE_TYPE *arg2 = (SAMPLE_TYPE *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = *(SAMPLE_TYPE **)&jarg2; 
  arg3 = (int)jarg3; 
  BufferUtility::bufferToFile((char const *)arg1,arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BufferUtility(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BufferUtility *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BufferUtility *)new BufferUtility();
  *(BufferUtility **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1BufferUtility(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BufferUtility *arg1 = (BufferUtility *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BufferUtility **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BulkCacher(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  BulkCacher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (BulkCacher *)new BulkCacher(arg1);
  *(BulkCacher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1BulkCacher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BulkCacher **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BulkCacher_1addToQueue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  std::vector< BaseCacheableAudioEvent * > *arg2 = (std::vector< BaseCacheableAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BulkCacher **)&jarg1; 
  arg2 = *(std::vector< BaseCacheableAudioEvent * > **)&jarg2; 
  (arg1)->addToQueue(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BulkCacher_1addToQueue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  BaseCacheableAudioEvent *arg2 = (BaseCacheableAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BulkCacher **)&jarg1; 
  arg2 = *(BaseCacheableAudioEvent **)&jarg2; 
  (arg1)->addToQueue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BulkCacher_1removeFromQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  BaseCacheableAudioEvent *arg2 = (BaseCacheableAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BulkCacher **)&jarg1; 
  arg2 = *(BaseCacheableAudioEvent **)&jarg2; 
  result = (bool)(arg1)->removeFromQueue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BulkCacher_1hasQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BulkCacher **)&jarg1; 
  result = (bool)(arg1)->hasQueue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BulkCacher_1cacheQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BulkCacher **)&jarg1; 
  (arg1)->cacheQueue();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BulkCacher_1clearQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BulkCacher *arg1 = (BulkCacher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BulkCacher **)&jarg1; 
  (arg1)->clearQueue();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LevelUtility_1RMS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int arg2 ;
  SAMPLE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = LevelUtility::RMS(arg1,arg2);
  *(SAMPLE_TYPE **)&jresult = new SAMPLE_TYPE((const SAMPLE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LevelUtility_1dBSPL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int arg2 ;
  SAMPLE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = LevelUtility::dBSPL(arg1,arg2);
  *(SAMPLE_TYPE **)&jresult = new SAMPLE_TYPE((const SAMPLE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LevelUtility_1linear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AudioChannel *arg1 = (AudioChannel *) 0 ;
  int arg2 ;
  SAMPLE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AudioChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = LevelUtility::linear(arg1,arg2);
  *(SAMPLE_TYPE **)&jresult = new SAMPLE_TYPE((const SAMPLE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1LevelUtility(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LevelUtility *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LevelUtility *)new LevelUtility();
  *(LevelUtility **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1LevelUtility(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LevelUtility *arg1 = (LevelUtility *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LevelUtility **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleUtility_1pitchShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  SampleUtility::pitchShift(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SampleUtility(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleUtility *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleUtility *)new SampleUtility();
  *(SampleUtility **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1SampleUtility(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleUtility *arg1 = (SampleUtility *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleUtility **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1DrumPattern(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  BaseInstrument *arg2 = (BaseInstrument *) 0 ;
  DrumPattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(BaseInstrument **)&jarg2; 
  result = (DrumPattern *)new DrumPattern(arg1,arg2);
  *(DrumPattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1DrumPattern(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DrumPattern **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1AMOUNT_1OF_1STEPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DrumPattern::AMOUNT_OF_STEPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1EVENT_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DrumPattern::EVENT_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1EVENT_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DrumPattern::EVENT_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int) ((arg1)->num);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1eventAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eventAmount = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1eventAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int) ((arg1)->eventAmount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1audioEvents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  std::vector< BaseAudioEvent * > *arg2 = (std::vector< BaseAudioEvent * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(std::vector< BaseAudioEvent * > **)&jarg2; 
  if (arg1) (arg1)->audioEvents = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1audioEvents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *) ((arg1)->audioEvents);
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1addToInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  (arg1)->addToInstrument();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1removeFromInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  (arg1)->removeFromInstrument();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1updateTimbre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->updateTimbre(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1cacheEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->cacheEvents(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1addDrumEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addDrumEvent(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1removeDrumEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->removeDrumEvent(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1hasContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (bool)(arg1)->hasContent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1getKickPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int *)(arg1)->getKickPattern();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1getSnarePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int *)(arg1)->getSnarePattern();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1getStickPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int *)(arg1)->getStickPattern();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1getHatPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  result = (int *)(arg1)->getHatPattern();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1setKickPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setKickPattern(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1setSnarePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSnarePattern(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1setStickPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setStickPattern(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumPattern_1setHatPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DrumPattern *arg1 = (DrumPattern *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumPattern **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setHatPattern(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_cachedSample_1sampleLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cachedSample *arg1 = (cachedSample *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sampleLength = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_cachedSample_1sampleLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cachedSample *arg1 = (cachedSample *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  result = (int) ((arg1)->sampleLength);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_cachedSample_1sampleRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cachedSample *arg1 = (cachedSample *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sampleRate = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_cachedSample_1sampleRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cachedSample *arg1 = (cachedSample *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  result = (unsigned int) ((arg1)->sampleRate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_cachedSample_1sampleBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cachedSample *arg1 = (cachedSample *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  if (arg1) (arg1)->sampleBuffer = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_cachedSample_1sampleBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cachedSample *arg1 = (cachedSample *) 0 ;
  AudioBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cachedSample **)&jarg1; 
  result = (AudioBuffer *) ((arg1)->sampleBuffer);
  *(AudioBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1cachedSample(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cachedSample *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cachedSample *)new cachedSample();
  *(cachedSample **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1cachedSample(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cachedSample *arg1 = (cachedSample *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cachedSample **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleManager_1setSample(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  std::string arg1 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  SampleManager::setSample(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleManager_1getSample(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  AudioBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (AudioBuffer *)SampleManager::getSample(arg1);
  *(AudioBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleManager_1getSampleLength(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)SampleManager::getSampleLength(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleManager_1getSampleRateForSample(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)SampleManager::getSampleRateForSample(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleManager_1hasSample(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SampleManager::hasSample(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleManager_1removeSample(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string arg1 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  SampleManager::removeSample(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleManager_1flushSamples(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  SampleManager::flushSamples();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SampleManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleManager *)new SampleManager();
  *(SampleManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1SampleManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleManager *arg1 = (SampleManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI__1sampleMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,cachedSample > *arg1 = (std::map< std::string,cachedSample > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,cachedSample > **)&jarg1; 
  SampleManagerSamples::_sampleMap = *arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI__1sampleMap_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,cachedSample > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,cachedSample > *)&SampleManagerSamples::_sampleMap;
  *(std::map< std::string,cachedSample > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BaseInstrument(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseInstrument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseInstrument *)new BaseInstrument();
  *(BaseInstrument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1BaseInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseInstrument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1hasEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (bool)(arg1)->hasEvents();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1hasLiveEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (bool)(arg1)->hasLiveEvents();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1updateEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  (arg1)->updateEvents();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1getEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *)(arg1)->getEvents();
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1getLiveEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *)(arg1)->getLiveEvents();
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1clearEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  (arg1)->clearEvents();
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1removeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  BaseAudioEvent *arg2 = (BaseAudioEvent *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BaseInstrument **)&jarg1; 
  arg2 = *(BaseAudioEvent **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->removeEvent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1registerInSequencer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  (arg1)->registerInSequencer();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1unregisterFromSequencer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  (arg1)->unregisterFromSequencer();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1audioChannel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  AudioChannel *arg2 = (AudioChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BaseInstrument **)&jarg1; 
  arg2 = *(AudioChannel **)&jarg2; 
  if (arg1) (arg1)->audioChannel = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1audioChannel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  AudioChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (AudioChannel *) ((arg1)->audioChannel);
  *(AudioChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseInstrument_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (int) ((arg1)->index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1DrumInstrument(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DrumInstrument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DrumInstrument *)new DrumInstrument();
  *(DrumInstrument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1DrumInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DrumInstrument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1getEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *)(arg1)->getEvents();
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1getEventsForPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  int arg2 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::vector< BaseAudioEvent * > *)(arg1)->getEventsForPattern(arg2);
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1getEventsForActivePattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  std::vector< BaseAudioEvent * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (std::vector< BaseAudioEvent * > *)(arg1)->getEventsForActivePattern();
  *(std::vector< BaseAudioEvent * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1drumTimbre_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->drumTimbre = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1drumTimbre_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (int) ((arg1)->drumTimbre);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1drumPatterns_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  std::vector< DrumPattern * > *arg2 = (std::vector< DrumPattern * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = *(std::vector< DrumPattern * > **)&jarg2; 
  if (arg1) (arg1)->drumPatterns = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1drumPatterns_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  std::vector< DrumPattern * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (std::vector< DrumPattern * > *) ((arg1)->drumPatterns);
  *(std::vector< DrumPattern * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1activeDrumPattern_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->activeDrumPattern = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1activeDrumPattern_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (int) ((arg1)->activeDrumPattern);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1rOsc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  RouteableOscillator *arg2 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = *(RouteableOscillator **)&jarg2; 
  if (arg1) (arg1)->rOsc = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1rOsc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  RouteableOscillator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (RouteableOscillator *) ((arg1)->rOsc);
  *(RouteableOscillator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1hasEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  result = (bool)(arg1)->hasEvents();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1updateEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  (arg1)->updateEvents();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1clearEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  (arg1)->clearEvents();
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1removeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  BaseAudioEvent *arg2 = (BaseAudioEvent *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = *(BaseAudioEvent **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->removeEvent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1getDrumPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  int arg2 ;
  DrumPattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (DrumPattern *)(arg1)->getDrumPattern(arg2);
  *(DrumPattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1setDrumPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DrumInstrument *arg1 = (DrumInstrument *) 0 ;
  DrumPattern *arg2 = (DrumPattern *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DrumInstrument **)&jarg1; 
  arg2 = *(DrumPattern **)&jarg2; 
  result = (int)(arg1)->setDrumPattern(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SampledInstrument(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampledInstrument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampledInstrument *)new SampledInstrument();
  *(SampledInstrument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1SampledInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampledInstrument *arg1 = (SampledInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampledInstrument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampledInstrument_1updateEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SampledInstrument *arg1 = (SampledInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampledInstrument **)&jarg1; 
  (arg1)->updateEvents();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SynthInstrument(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SynthInstrument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SynthInstrument *)new SynthInstrument();
  *(SynthInstrument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1SynthInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SynthInstrument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1octave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->octave = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1octave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int) ((arg1)->octave);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1keyboardOctave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->keyboardOctave = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1keyboardOctave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int) ((arg1)->keyboardOctave);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1keyboardVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->keyboardVolume = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1keyboardVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (float) ((arg1)->keyboardVolume);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1synthesizer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  Synthesizer *arg2 = (Synthesizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(Synthesizer **)&jarg2; 
  if (arg1) (arg1)->synthesizer = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1synthesizer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  Synthesizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (Synthesizer *) ((arg1)->synthesizer);
  *(Synthesizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1getOscillatorAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (int)(arg1)->getOscillatorAmount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1setOscillatorAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOscillatorAmount(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1reserveOscillators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserveOscillators(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1getOscillatorProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  int arg2 ;
  OscillatorProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OscillatorProperties *)(arg1)->getOscillatorProperties(arg2);
  *(OscillatorProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1arpeggiator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  Arpeggiator *arg2 = (Arpeggiator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(Arpeggiator **)&jarg2; 
  if (arg1) (arg1)->arpeggiator = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1arpeggiator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  Arpeggiator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (Arpeggiator *) ((arg1)->arpeggiator);
  *(Arpeggiator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1arpeggiatorActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->arpeggiatorActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1arpeggiatorActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (bool) ((arg1)->arpeggiatorActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1rOsc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  RouteableOscillator *arg2 = (RouteableOscillator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(RouteableOscillator **)&jarg2; 
  if (arg1) (arg1)->rOsc = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1rOsc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  RouteableOscillator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (RouteableOscillator *) ((arg1)->rOsc);
  *(RouteableOscillator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1adsr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  ADSR *arg2 = (ADSR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SynthInstrument **)&jarg1; 
  arg2 = *(ADSR **)&jarg2; 
  if (arg1) (arg1)->adsr = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1adsr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  ADSR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  result = (ADSR *) ((arg1)->adsr);
  *(ADSR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1updateEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SynthInstrument *arg1 = (SynthInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SynthInstrument **)&jarg1; 
  (arg1)->updateEvents();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1OscillatorProperties(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  OscillatorProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (OscillatorProperties *)new OscillatorProperties(arg1,arg2,arg3,arg4);
  *(OscillatorProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1OscillatorProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OscillatorProperties **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1getWaveform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  result = (int)(arg1)->getWaveform();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1setWaveform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setWaveform(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1setCustomWaveform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCustomWaveform(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1detune_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->detune = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1detune_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  result = (float) ((arg1)->detune);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1octaveShift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->octaveShift = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1octaveShift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  result = (int) ((arg1)->octaveShift);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1fineShift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fineShift = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1fineShift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  result = (int) ((arg1)->fineShift);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1waveTable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  WaveTable *arg2 = (WaveTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  arg2 = *(WaveTable **)&jarg2; 
  if (arg1) (arg1)->waveTable = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_OscillatorProperties_1waveTable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OscillatorProperties *arg1 = (OscillatorProperties *) 0 ;
  WaveTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OscillatorProperties **)&jarg1; 
  result = (WaveTable *) ((arg1)->waveTable);
  *(WaveTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BaseAudioEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  BaseAudioEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (BaseAudioEvent *)new BaseAudioEvent(arg1);
  *(BaseAudioEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BaseAudioEvent_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseAudioEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseAudioEvent *)new BaseAudioEvent();
  *(BaseAudioEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1BaseAudioEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (float)(arg1)->getVolume();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getVolumeLogarithmic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (float)(arg1)->getVolumeLogarithmic();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setVolume(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1mixBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6, jint jarg7, jboolean jarg8) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  int arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->mixBuffer(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  AudioBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (AudioBuffer *)(arg1)->getBuffer();
  *(AudioBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setBuffer(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1hasBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (bool)(arg1)->hasBuffer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1synthesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  AudioBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (AudioBuffer *)(arg1)->synthesize(arg2);
  *(AudioBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  BaseInstrument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (BaseInstrument *)(arg1)->getInstrument();
  *(BaseInstrument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  BaseInstrument *arg2 = (BaseInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = *(BaseInstrument **)&jarg2; 
  (arg1)->setInstrument(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1play(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->play();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1addToSequencer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->addToSequencer();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1removeFromSequencer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->removeFromSequencer();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1isSequenced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSequenced = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1isSequenced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (bool) ((arg1)->isSequenced);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setEventLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEventLength(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setEventStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEventStart(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setEventEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEventEnd(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getEventLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getEventLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getEventStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getEventStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getEventEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getEventEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setStartPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setStartPosition(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setEndPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setEndPosition(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setDuration(arg2);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getStartPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (float)(arg1)->getStartPosition();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getEndPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (float)(arg1)->getEndPosition();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (float)(arg1)->getDuration();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1positionEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->positionEvent(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1isLoopeable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (bool)(arg1)->isLoopeable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setLoopeable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoopeable(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getReadPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getReadPointer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1isDeletable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (bool)(arg1)->isDeletable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setDeletable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDeletable(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (bool)(arg1)->isEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1isLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (bool)(arg1)->isLocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setSampleLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSampleLength(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setSampleStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSampleStart(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1setSampleEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSampleEnd(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getSampleLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getSampleLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getSampleStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getSampleStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseAudioEvent_1getSampleEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseAudioEvent *arg1 = (BaseAudioEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseAudioEvent **)&jarg1; 
  result = (int)(arg1)->getSampleEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BaseCacheableAudioEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  BaseCacheableAudioEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (BaseCacheableAudioEvent *)new BaseCacheableAudioEvent(arg1);
  *(BaseCacheableAudioEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1BaseCacheableAudioEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseCacheableAudioEvent_1setAutoCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoCache(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseCacheableAudioEvent_1cache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->cache(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseCacheableAudioEvent_1isCached(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  result = (bool)(arg1)->isCached();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseCacheableAudioEvent_1setBulkCacheable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseCacheableAudioEvent *arg1 = (BaseCacheableAudioEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseCacheableAudioEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBulkCacheable(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1envelope_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  SAMPLE_TYPE arg2 ;
  SAMPLE_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  argp2 = *(SAMPLE_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SAMPLE_TYPE");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->envelope = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1envelope_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  SAMPLE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  result =  ((arg1)->envelope);
  *(SAMPLE_TYPE **)&jresult = new SAMPLE_TYPE((const SAMPLE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1releaseLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  SAMPLE_TYPE arg2 ;
  SAMPLE_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  argp2 = *(SAMPLE_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SAMPLE_TYPE");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->releaseLevel = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1releaseLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  SAMPLE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  result =  ((arg1)->releaseLevel);
  *(SAMPLE_TYPE **)&jresult = new SAMPLE_TYPE((const SAMPLE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1envelopeOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->envelopeOffset = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1envelopeOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  result = (int) ((arg1)->envelopeOffset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1phaseIncr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  SAMPLE_TYPE arg2 ;
  SAMPLE_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  argp2 = *(SAMPLE_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SAMPLE_TYPE");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->phaseIncr = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1phaseIncr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  SAMPLE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  result =  ((arg1)->phaseIncr);
  *(SAMPLE_TYPE **)&jresult = new SAMPLE_TYPE((const SAMPLE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1arpeggioPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->arpeggioPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1arpeggioPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  result = (int) ((arg1)->arpeggioPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1arpeggioStep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->arpeggioStep = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1arpeggioStep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  result = (int) ((arg1)->arpeggioStep);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1oscillatorPhases_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  std::vector< SAMPLE_TYPE > arg2 ;
  std::vector< SAMPLE_TYPE > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  argp2 = *(std::vector< SAMPLE_TYPE > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< SAMPLE_TYPE >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->oscillatorPhases = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_CachedProperties_1oscillatorPhases_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  std::vector< SAMPLE_TYPE > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CachedProperties **)&jarg1; 
  result =  ((arg1)->oscillatorPhases);
  *(std::vector< SAMPLE_TYPE > **)&jresult = new std::vector< SAMPLE_TYPE >((const std::vector< SAMPLE_TYPE > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1CachedProperties(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CachedProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CachedProperties *)new CachedProperties();
  *(CachedProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1CachedProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CachedProperties *arg1 = (CachedProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CachedProperties **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BaseSynthEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseSynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseSynthEvent *)new BaseSynthEvent();
  *(BaseSynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BaseSynthEvent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  float arg1 ;
  int arg2 ;
  float arg3 ;
  SynthInstrument *arg4 = (SynthInstrument *) 0 ;
  BaseSynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (float)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(SynthInstrument **)&jarg4; 
  result = (BaseSynthEvent *)new BaseSynthEvent(arg1,arg2,arg3,arg4);
  *(BaseSynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1BaseSynthEvent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  float arg1 ;
  SynthInstrument *arg2 = (SynthInstrument *) 0 ;
  BaseSynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  arg2 = *(SynthInstrument **)&jarg2; 
  result = (BaseSynthEvent *)new BaseSynthEvent(arg1,arg2);
  *(BaseSynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1BaseSynthEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1instanceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->instanceId = arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1instanceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (unsigned int) ((arg1)->instanceId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->position = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (int) ((arg1)->position);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (float) ((arg1)->length);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1released_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->released = arg2;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1released_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (bool) ((arg1)->released);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1play(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  (arg1)->play();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1getEventEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (int)(arg1)->getEventEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1isQueuedForDeletion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (bool)(arg1)->isQueuedForDeletion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1getFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (float)(arg1)->getFrequency();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1getBaseFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (float)(arg1)->getBaseFrequency();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1setFrequency_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFrequency(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1setFrequency_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setFrequency(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1cachedProps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  CachedProperties *arg2 = (CachedProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = *(CachedProperties **)&jarg2; 
  if (arg1) (arg1)->cachedProps = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1cachedProps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  CachedProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (CachedProperties *)& ((arg1)->cachedProps);
  *(CachedProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1getPhaseForOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int arg2 ;
  SAMPLE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getPhaseForOscillator(arg2);
  *(SAMPLE_TYPE **)&jresult = new SAMPLE_TYPE((const SAMPLE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1setPhaseForOscillator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int arg2 ;
  SAMPLE_TYPE arg3 ;
  SAMPLE_TYPE *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(SAMPLE_TYPE **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SAMPLE_TYPE");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setPhaseForOscillator(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1lastWriteIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lastWriteIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1lastWriteIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  result = (int) ((arg1)->lastWriteIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1invalidateProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int arg2 ;
  float arg3 ;
  SynthInstrument *arg4 = (SynthInstrument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(SynthInstrument **)&jarg4; 
  (arg1)->invalidateProperties(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1calculateBuffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  (arg1)->calculateBuffers();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1mixBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6, jint jarg7, jboolean jarg8) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  int arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->mixBuffer(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1synthesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  int arg2 ;
  AudioBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (AudioBuffer *)(arg1)->synthesize(arg2);
  *(AudioBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1setDeletable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BaseSynthEvent *arg1 = (BaseSynthEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseSynthEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDeletable(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SampleEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleEvent *)new SampleEvent();
  *(SampleEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SampleEvent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseInstrument *arg1 = (BaseInstrument *) 0 ;
  SampleEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseInstrument **)&jarg1; 
  result = (SampleEvent *)new SampleEvent(arg1);
  *(SampleEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1SampleEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1play(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  (arg1)->play();
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getBufferRangeStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getBufferRangeStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1setBufferRangeStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBufferRangeStart(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getBufferRangeEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getBufferRangeEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1setBufferRangeEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBufferRangeEnd(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getBufferRangeLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getBufferRangeLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1synthesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int arg2 ;
  AudioBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (AudioBuffer *)(arg1)->synthesize(arg2);
  *(AudioBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1setSample_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  (arg1)->setSample(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1setSample_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setSample(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getPlaybackRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (float)(arg1)->getPlaybackRate();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1setPlaybackRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setPlaybackRate(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getEventLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getEventLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getEventEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getEventEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1mixBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6, jint jarg7, jboolean jarg8) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  int arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->mixBuffer(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getRangeBasedPlayback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (bool)(arg1)->getRangeBasedPlayback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1setRangeBasedPlayback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRangeBasedPlayback(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getBufferForRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  AudioBuffer *arg2 = (AudioBuffer *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  arg2 = *(AudioBuffer **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->getBufferForRange(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getPlaybackPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (int)(arg1)->getPlaybackPosition();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1getSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SampleEvent *arg1 = (SampleEvent *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleEvent **)&jarg1; 
  result = (unsigned int)(arg1)->getSampleRate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1DrumEvent(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  BaseInstrument *arg4 = (BaseInstrument *) 0 ;
  DrumEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(BaseInstrument **)&jarg4; 
  result = (DrumEvent *)new DrumEvent(arg1,arg2,arg3,arg4);
  *(DrumEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1DrumEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DrumEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumEvent_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->position = arg2;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumEvent_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  result = (int) ((arg1)->position);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumEvent_1getTimbre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  result = (int)(arg1)->getTimbre();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumEvent_1setTimbre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTimbre(arg2);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumEvent_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  result = (int)(arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumEvent_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumEvent_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DrumEvent *arg1 = (DrumEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrumEvent **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1PercussionTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PercussionTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PercussionTypes *)new PercussionTypes();
  *(PercussionTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1PercussionTypes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PercussionTypes *arg1 = (PercussionTypes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PercussionTypes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1DrumTimbres(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DrumTimbres *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DrumTimbres *)new DrumTimbres();
  *(DrumTimbres **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1DrumTimbres(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DrumTimbres *arg1 = (DrumTimbres *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DrumTimbres **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SynthEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  float arg1 ;
  int arg2 ;
  float arg3 ;
  SynthInstrument *arg4 = (SynthInstrument *) 0 ;
  SynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (float)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(SynthInstrument **)&jarg4; 
  result = (SynthEvent *)new SynthEvent(arg1,arg2,arg3,arg4);
  *(SynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SynthEvent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  float arg1 ;
  SynthInstrument *arg2 = (SynthInstrument *) 0 ;
  SynthEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  arg2 = *(SynthInstrument **)&jarg2; 
  result = (SynthEvent *)new SynthEvent(arg1,arg2);
  *(SynthEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1SynthEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SynthEvent *arg1 = (SynthEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SynthEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_new_1SequencerController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SequencerController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SequencerController *)new SequencerController();
  *(SequencerController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_delete_1SequencerController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequencerController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jint jarg4) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->prepare(arg2,arg3,arg4);
}


SWIGEXPORT jfloat JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getTempo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (float)(arg1)->getTempo();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setTempo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jint jarg4) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setTempo(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setTempoNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jint jarg4) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setTempoNow(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setVolume(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPlaying(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setLoopRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLoopRange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setLoopRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setLoopRange(arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getStepPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (int)(arg1)->getStepPosition();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getBufferPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (int)(arg1)->getBufferPosition();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setBufferPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBufferPosition(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1updateStepsPerBar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->updateStepsPerBar(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1updateMeasures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->updateMeasures(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getSamplesPerBeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (int)(arg1)->getSamplesPerBeat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getSamplesPerStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (int)(arg1)->getSamplesPerStep();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getSamplesPerBar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (int)(arg1)->getSamplesPerBar();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getTimeSigBeatAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (int)(arg1)->getTimeSigBeatAmount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getTimeSigBeatUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (int)(arg1)->getTimeSigBeatUnit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1rewind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  (arg1)->rewind();
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setNotificationMarker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNotificationMarker(arg2);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1getBulkCacher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SequencerController *arg1 = (SequencerController *) 0 ;
  BulkCacher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  result = (BulkCacher *)(arg1)->getBulkCacher();
  *(BulkCacher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1cacheAudioEventsForMeasure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->cacheAudioEventsForMeasure(arg2);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setBounceState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jstring jarg4) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  bool arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->setBounceState(arg2,arg3,arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setRecordingState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jstring jarg4) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  bool arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->setRecordingState(arg2,arg3,arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SequencerController_1setRecordingFromDeviceState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jstring jarg4) {
  SequencerController *arg1 = (SequencerController *) 0 ;
  bool arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SequencerController **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->setRecordingFromDeviceState(arg2,arg3,arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BitCrusher_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(BitCrusher **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Decimator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Decimator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Delay_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Delay **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Filter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Filter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Flanger_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Flanger **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Limiter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Limiter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LowPassFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(LowPassFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_LPFHPFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(LPFHPFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FrequencyModulator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(FrequencyModulator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_FormantFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(FormantFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Glitcher_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Glitcher **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Phaser_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Phaser **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_PitchShifter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(PitchShifter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Reverb_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Reverb **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_Tremolo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(Tremolo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_WaveShaper_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseProcessor **)&baseptr = *(WaveShaper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumInstrument_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseInstrument **)&baseptr = *(DrumInstrument **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampledInstrument_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseInstrument **)&baseptr = *(SampledInstrument **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthInstrument_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseInstrument **)&baseptr = *(SynthInstrument **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseCacheableAudioEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseAudioEvent **)&baseptr = *(BaseCacheableAudioEvent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_BaseSynthEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseAudioEvent **)&baseptr = *(BaseSynthEvent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SampleEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseAudioEvent **)&baseptr = *(SampleEvent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_DrumEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SampleEvent **)&baseptr = *(DrumEvent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nl_igorski_lib_audio_mwengine_MWEngineCoreJNI_SynthEvent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseSynthEvent **)&baseptr = *(SynthEvent **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

